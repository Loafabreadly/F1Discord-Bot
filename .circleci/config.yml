version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@8.2.1
  aws-ecs: circleci/aws-ecs@3.2.0
  aws-cli: circleci/aws-cli@3.1
jobs:
  gradle-build:
    docker:
      - image: cimg/openjdk:11.0.18
    working_directory: ~/repo
    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    steps:
      - checkout # Checkout the repo
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
        name: List
        command: ls -lah
      - run:
          name: Check Log4j2 Appender Level
          command: |
            if [ "$(grep -c 'Root level=\"INFO\"' /src/main/resources/log4j2.xml)" -eq 0]; then
              echo "Logging level set to something other than INFO"
              exit 1
            fi
      - run: gradle dependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}
      - run: gradle build --no-daemon
      - persist_to_workspace:
          root: build/libs
          paths:
            - "F1Discord-Bot-all.jar"
      - persist_to_workspace:
          root: .
          paths:
            - "Dockerfile"
  update-ecs-task:
    docker:
      - image: cimg/python:3.10
    steps:
      - aws-cli/setup:
          role-arn: $AWS_ARN
          role-session-name: CIRole
      - aws-ecs/update-service:
          cluster: cluster-$APP_NAME 
          container-image-name-updates: container=$APP_NAME,image-and-tag=$AWS_ECR_REGISTRY_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$APP_NAME:latest 
          deployment-controller: ECS 
          enable-circuit-breaker: false 
          service-name: $APP_NAME-service 
          family: $APP_NAME-task 
          force-new-deployment: true 
workflows:
    build-deploy:
      jobs:
        - gradle-build # We run the gradle-build pipeline on all branches to validate build
        - aws-ecr/build-and-push-image: # We should only run the build & push + ECS update on the master branch.
            filters:
              branches:
                only:
                  - master
            requires:
              - gradle-build
            pre-steps:
              - attach_workspace:
                  at: build/libs
              - attach_workspace:
                  at: .
            checkout: false
            dockerfile: Dockerfile
            assume-web-identity: true
            region: '${AWS_DEFAULT_REGION}'
            registry-id: AWS_ECR_REGISTRY_ID
            extra-build-args: "--compress --build-arg DISCORD_TOKEN=${DISCORD_TOKEN} --build-arg VER=${CIRCLE_BUILD_NUM}"
            create-repo: true
            no-output-timeout: '3m' 
            push-image: true 
            repo: $APP_NAME
            repo-scan-on-push: true
            role-arn: $AWS_ARN
            role-session-name: CIRole
            context: aws
        - update-ecs-task:
            requires:
              - aws-ecr/build-and-push-image
            context: aws